<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.CoreCLR.Eventing</name>
    </assembly>
    <members>
        <member name="M:System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)">
            <summary>
            Constructor for EventProvider class.
            </summary>
            <param name="providerGuid">
            Unique GUID among all trace sources running on a system
            </param>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.EtwRegister">
            <summary>
            This method registers the controlGuid of this class with ETW.
            We need to be running on Vista or above. If not an
            PlatformNotSupported exception will be thrown.
            If for some reason the ETW EtwRegister call failed
            a NotSupported exception will be thrown.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.Close">
            <summary>
            This method deregisters the controlGuid of this class with ETW.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.Deregister">
            <summary>
            This method un-registers from ETW.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled">
            <summary>
            IsEnabled, method used to test if provider is enabled.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)">
            <summary>
            IsEnabled, method used to test if event is enabled.
            </summary>
            <param name="level">
            Level to test
            </param>
            <param name="keywords">
            Keyword to test
            </param>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)">
            <summary>
            WriteMessageEvent, method to write a string with level and Keyword.
            The activity ID will be propagated only if the call stays on the same native thread as SetActivityId().
            </summary>
            <param name="eventMessage">
            Message to write
            </param>
            <param name="eventLevel">
            Level to test
            </param>
            <param name="eventKeywords">
            Keyword to test
            </param>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)">
            <summary>
            WriteMessageEvent, method to write a string with level=0 and Keyword=0
            The activity ID will be propagated only if the call stays on the same native thread as SetActivityId().
            </summary>
            <param name="eventMessage">
            Message to log
            </param>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])">
            <summary>
            WriteEvent method to write parameters with event schema properties.
            </summary>
            <param name="eventDescriptor">
            Event Descriptor for this event.
            </param>
            <param name="eventPayload">
            </param>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
            <summary>
            WriteEvent, method to write a string with event schema properties.
            </summary>
            <param name="eventDescriptor">
            Event Descriptor for this event.
            </param>
            <param name="data">
            string to log.
            </param>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)">
            <summary>
            WriteEvent, method to be used by generated code on a derived class.
            </summary>
            <param name="eventDescriptor">
            Event Descriptor for this event.
            </param>
            <param name="dataCount">
            number of event descriptors
            </param>
            <param name="data">
            pointer do the event data
            </param>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])">
            <summary>
            WriteTransferEvent, method to write a parameters with event schema properties.
            </summary>
            <param name="eventDescriptor">
            Event Descriptor for this event.
            </param>
            <param name="relatedActivityId">
            </param>
            <param name="eventPayload">
            </param>
        </member>
        <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)">
            <summary>
            This method creates an instance of the ETW provider.
            The guid argument must be a valid GUID or a format exception will be
            thrown when creating an instance of the ControlGuid.
            We need to be running on Vista or above. If not an
            PlatformNotSupported exception will be thrown by the EventProvider.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventBookmark">
            <summary>
            Represents an opaque Event Bookmark obtained from an EventRecord.
            The bookmark denotes a unique identifier for the event instance as
            well as marks the location in the the result set of the EventReader
            that the event instance was obtained from.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventKeyword">
            <summary>
            Describes the metadata for a specific Keyword defined by a Provider.
            An instance of this class is obtained from a ProviderMetadata object.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLevel">
            <summary>
            Describes the metadata for a specific Level defined by a Provider.
            An instance of this class is obtained from a ProviderMetadata object.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogType">
            <summary>
            Log Type.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogIsolation">
            <summary>
            Log Isolation.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogMode">
            <summary>
            Log Mode.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration">
            <summary>
            Provides access to static log information and configures
            log publishing and log file properties.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException">
            <summary>
            The object requested by the operation is not found.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogReadingException">
            <summary>
            The state of the reader cursor has become invalid, most likely due to the fact
            that the log has been cleared.  User needs to obtain a new reader object if
            they wish to continue navigating result set.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException">
            <summary>
            Provider has been uninstalled while ProviderMetadata operations are being performed.
            Obtain a new ProviderMetadata object, when provider is reinstalled, to continue navigating
            provider's metadata.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException">
            <summary>
            Data obtained from the eventlog service, for the current operation, is invalid .
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogInformation">
            <summary>
            Describes the run-time properties of logs and external log files.  An instance
            of this class is obtained from EventLogSession.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogLink">
            <summary>
            Describes the metadata for a specific Log Reference defined
            by a Provider. An instance of this class is obtained from
            a ProviderMetadata object.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector">
            <summary>
            Encapsulates the information for fast access to Event Values
            of an EventLogRecord. An instance of this class is constructed
            and then passed to EventLogRecord.GetEventPropertyValues.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogQuery">
            <summary>
            Allows a user to define events of interest. An instance of this
            class is passed to an EventReader to actually obtain the EventRecords.
            The EventLogQuery can be as simple specifying that all events are of
            interest, or it can contain query / xpath expressions that indicate exactly
            what characteristics events should have.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogReader">
            <summary>
            This public class is used for reading event records from event log.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.EventLogReader._eventsBuffer">
            <summary>
            Events buffer holds batched event (handles).
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.EventLogReader._currentIndex">
            <summary>
            The current index where the function GetNextEvent is (inside the eventsBuffer).
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.EventLogReader._eventCount">
            <summary>
            The number of events read from the batch into the eventsBuffer.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.EventLogReader._isEof">
            <summary>
            When the reader finishes (will always return only ERROR_NO_MORE_ITEMS).
            For subscription, this means we need to wait for next event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.EventLogReader._cachedMetadataInformation">
            <summary>
            Maintains cached display / metadata information returned from
            EventRecords that were obtained from this reader.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.SessionAuthentication">
            <summary>
            Session Login Type.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.PathType">
            <summary>
            The type: log / external log file to query.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventLogStatus">
            <summary>
            Describes the status of a particular log with respect to
            an instantiated EventLogReader.  Since it is possible to
            instantiate an EventLogReader with a query containing
            multiple logs and the reader can be configured to tolerate
            errors in attaching to those logs, this class allows the
            user to determine exactly what the status of those logs is.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventMetadata">
            <summary>
            Event Metadata.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventRecord">
            <summary>
            Represents an event obtained from an EventReader.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.EventTask">
            <summary>
            Describes the metadata for a specific Task defined by a Provider.
            An instance of this class is obtained from a ProviderMetadata object.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.ProviderMetadata">
            <summary>
            Exposes all the metadata for a specific event Provider.  An instance
            of this class is obtained from EventLogManagement and is scoped to a
            single Locale.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.StandardEventLevel">
            <summary>
            WindowsEventLevel.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.LogAlways">
            <summary>
            Log always.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Critical">
            <summary>
            Only critical errors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Error">
            <summary>
            All errors, including previous levels.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Warning">
            <summary>
            All warnings, including previous levels.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Informational">
            <summary>
            All informational events, including previous levels.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Verbose">
            <summary>
            All events, including previous levels.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.StandardEventTask">
            <summary>
            WindowsEventTask.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventTask.None">
            <summary>
            Undefined task.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.StandardEventOpcode">
            <summary>
            EventOpcode.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Info">
            <summary>
            An informational event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Start">
            <summary>
            An activity start event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Stop">
            <summary>
            An activity end event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStart">
            <summary>
            A trace collection start event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStop">
            <summary>
            A trace collection end event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Extension">
            <summary>
            An extensional event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Reply">
            <summary>
            A reply event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Resume">
            <summary>
            An event representing the activity resuming from the suspension.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Suspend">
            <summary>
            An event representing the activity is suspended, pending another activity's completion.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Send">
            <summary>
            An event representing the activity is transferred to another component, and can continue to work.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Receive">
            <summary>
            An event representing receiving an activity transfer from another component.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.Reader.StandardEventKeywords">
            <summary>
            EventOpcode.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.None">
            <summary>
            Wild card value.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.ResponseTime">
            <summary>
            Events providing response time information.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiContext">
            <summary>
            WDI context events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiDiagnostic">
            <summary>
            WDI diagnostic events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.Sqm">
            <summary>
            SQM events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditFailure">
            <summary>
            FAiled security audits.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditSuccess">
            <summary>
            Successful security audits.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint">
            <summary>
            Incorrect CorrelationHint value mistakenly shipped in .NET 3.5. Don't use: duplicates AuditFailure.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint2">
            <summary>
            Transfer events where the related Activity ID is a computed value and not a GUID.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.EventLogClassic">
            <summary>
            Events raised using classic eventlog API.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.UnsafeNativeMethods.EvtVariantType">
            <summary>
            Evt Variant types.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.UnsafeNativeMethods.EvtQueryPropertyId">
            <summary>
            The query flags to get information about query.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Eventing.UnsafeNativeMethods.EvtPublisherMetadataPropertyId">
            <summary>
            Publisher Metadata properties.
            </summary>
        </member>
        <member name="T:DotNetEventingStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotNetEventingStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotNetEventingStrings.Culture">
            <summary>
              Overrides the current threads CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotNetEventingStrings.ArgumentOutOfRange_NeedNonNegNum">
            <summary>
              Looks up a localized string similar to 
               Non negative number is required.
             
            </summary>
        </member>
        <member name="P:DotNetEventingStrings.ArgumentOutOfRange_NeedValidId">
            <summary>
              Looks up a localized string similar to 
               The ID parameter must be in the range {0} through {1}.
             
            </summary>
        </member>
        <member name="P:DotNetEventingStrings.ArgumentOutOfRange_MaxArgExceeded">
            <summary>
              Looks up a localized string similar to 
               The total number of parameters must not exceed {0}.
             
            </summary>
        </member>
        <member name="P:DotNetEventingStrings.ArgumentOutOfRange_MaxStringsExceeded">
            <summary>
              Looks up a localized string similar to 
               The number of String parameters must not exceed {0}.
             
            </summary>
        </member>
        <member name="P:DotNetEventingStrings.Argument_NeedNonemptyDelimiter">
            <summary>
              Looks up a localized string similar to 
               Delimiter cannot be an empty string.
             
            </summary>
        </member>
    </members>
</doc>
