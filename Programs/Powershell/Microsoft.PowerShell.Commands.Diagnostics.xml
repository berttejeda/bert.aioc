<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.Commands.Diagnostics</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PowerShell.Commands.GetWinEventCommand">
            
             Class that implements the Get-WinEvent cmdlet.
            
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.ListLog">
            <summary>
            ListLog parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.LogName">
            <summary>
            GetLog parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.ListProvider">
            <summary>
            ListProvider parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.ProviderName">
            <summary>
            ProviderName parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.Path">
            <summary>
            Path parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.MaxEvents">
            <summary>
            MaxEvents parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.ComputerName">
            <summary>
            ComputerName parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.Credential">
            <summary>
            Credential parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.FilterXPath">
            <summary>
            FilterXPath parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.FilterXml">
            <summary>
            FilterXml parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.FilterHashtable">
            <summary>
            FilterHashtable parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.Force">
            <summary>
            Force switch.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.GetWinEventCommand.Oldest">
            <summary>
            Oldest switch.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetWinEventCommand.BeginProcessing">
            <summary>
            BeginProcessing() is invoked once per pipeline: we will load System.Core.dll here.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetWinEventCommand.EndProcessing">
            <summary>
            EndProcessing() is invoked once per pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.GetWinEventCommand.ProcessRecord">
            <summary>
            ProcessRecord() override.
            This is the main entry point for the cmdlet.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewWinEventCommand">
            
             Class that implements the New-WinEvent cmdlet.
             This cmdlet writes a new Etw event using the provider specified in parameter.
            
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewWinEventCommand.ProviderName">
            <summary>
            ProviderName.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewWinEventCommand.Id">
            <summary>
            Id (EventId defined in manifest file)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewWinEventCommand.Version">
            <summary>
            Version (event version)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewWinEventCommand.Payload">
            <summary>
            Event Payload.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewWinEventCommand.BeginProcessing">
            <summary>
            BeginProcessing.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewWinEventCommand.ProcessRecord">
            <summary>
            ProcessRecord.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewWinEventCommand.EndProcessing">
            <summary>
            EndProcessing.
            </summary>
        </member>
        <member name="T:System.Diagnostics.PerformanceCounterCategoryType">
            <summary>
            Indicates whether the performance counter category can have multiple instances.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown">
            <summary>
            The instance functionality for the performance counter category is unknown.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance">
            <summary>
            The performance counter category can have only a single instance.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance">
            <summary>
            The performance counter category can have multiple instances.
            </summary>
        </member>
        <member name="T:System.Diagnostics.PerformanceCounterType">
            <summary>
            Specifies the formula used to calculate the <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />
            method for a <see cref="T:System.Diagnostics.PerformanceCounter" /> instance.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32">
            <summary>
            An instantaneous counter that shows the most recently observed value.
            Used, for example, to maintain a simple count of items or operations.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64">
            <summary>
            An instantaneous counter that shows the most recently observed value.
            Used, for example, to maintain a simple count of a very large number
            of items or operations. It is the same as NumberOfItems32 except that
            it uses larger fields to accommodate larger values.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32">
            <summary>
            An instantaneous counter that shows the most recently observed value
            in hexadecimal format. Used, for example, to maintain a simple count
            of items or operations.</summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64">
            <summary>
            An instantaneous counter that shows the most recently observed value.
            Used, for example, to maintain a simple count of a very large number
            of items or operations. It is the same as NumberOfItemsHEX32 except
            that it uses larger fields to accommodate larger values.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32">
            <summary>
            A difference counter that shows the average number of operations completed
            during each second of the sample interval. Counters of this type measure
            time in ticks of the system clock.</summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64">
            <summary>
            A difference counter that shows the average number of operations completed
            during each second of the sample interval. Counters of this type measure
            time in ticks of the system clock. This counter type is the same as the
            RateOfCountsPerSecond32 type, but it uses larger fields to accommodate
            larger values to track a high-volume number of items or operations per
            second, such as a byte-transmission rate.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32">
            <summary>
            An average counter designed to monitor the average length of a queue
            to a resource over time. It shows the difference between the queue
            lengths observed during the last two sample intervals divided by the
            duration of the interval. This type of counter is typically used to
            track the number of items that are queued or waiting.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64">
            <summary>
            An average counter that monitors the average length of a queue to a
            resource over time. Counters of this type display the difference
            between the queue lengths observed during the last two sample intervals,
            divided by the duration of the interval. This counter type is the same
            as CountPerTimeInterval32 except that it uses larger fields to
            accommodate larger values. This type of counter is typically used
            to track a high-volume or very large number of items that are queued or waiting.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.RawFraction">
            <summary>
            An instantaneous percentage counter that shows the ratio of a subset
            to its set as a percentage. For example, it compares the number of bytes
            in use on a disk to the total number of bytes on the disk.
            Counters of this type display the current percentage only, not an average
            over time.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.RawBase">
            <summary>
            A base counter that stores the denominator of a counter that presents a
            general arithmetic fraction. Check that this value is greater than zero
            before using it as the denominator in a RawFraction value calculation.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.AverageTimer32">
            <summary>
            An average counter that measures the time it takes, on average, to
            complete a process or operation. Counters of this type display a
            ratio of the total elapsed time of the sample interval to the number
            of processes or operations completed during that time. This counter
            type measures time in ticks of the system clock.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.AverageBase">
            <summary>
            A base counter that is used in the calculation of time or count averages,
             such as AverageTimer32 and AverageCount64. Stores the denominator for
            calculating a counter to present "time per operation" or "count per operation".
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.AverageCount64">
            <summary>
            An average counter that shows how many items are processed, on average,
            during an operation. Counters of this type display a ratio of the items
            processed to the number of operations completed. The ratio is calculated
            by comparing the number of items processed during the last interval to
            the number of operations completed during the last interval.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.SampleFraction">
            <summary>
            A percentage counter that shows the average ratio of hits to all
            operations during the last two sample intervals.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.SampleCounter">
            <summary>
            An average counter that shows the average number of operations completed
            in one second. When a counter of this type samples the data, each sampling
            interrupt returns one or zero. The counter data is the number of ones that
            were sampled. It measures time in units of ticks of the system performance timer.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.SampleBase">
            <summary>
            A base counter that stores the number of sampling interrupts taken
            and is used as a denominator in the sampling fraction. The sampling
            fraction is the number of samples that were 1 (or true) for a sample
            interrupt. Check that this value is greater than zero before using
            it as the denominator in a calculation of SampleFraction.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimer">
            <summary>
            A percentage counter that shows the average time that a component is
            active as a percentage of the total sample time.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse">
            <summary>
            A percentage counter that displays the average percentage of active
            time observed during sample interval. The value of these counters is
            calculated by monitoring the percentage of time that the service was
            inactive and then subtracting that value from 100 percent.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.Timer100Ns">
            <summary>A percentage counter that shows the active time of a component
            as a percentage of the total elapsed time of the sample interval.
            It measures time in units of 100 nanoseconds (ns). Counters of this
            type are designed to measure the activity of one component at a time.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse">
            <summary>
            A percentage counter that shows the average percentage of active time
            observed during the sample interval.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.ElapsedTime">
            <summary>
            A difference timer that shows the total time between when the component
            or process started and the time when this value is calculated.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer">
            <summary>
            A percentage counter that displays the active time of one or more
            components as a percentage of the total time of the sample interval.
            Because the numerator records the active time of components operating
            simultaneously, the resulting percentage can exceed 100 percent.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse">
            <summary>
            A percentage counter that shows the active time of one or more components
            as a percentage of the total time of the sample interval. It derives
            the active time by measuring the time that the components were not
            active and subtracting the result from 100 percent by the number of
            objects monitored.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns">
            <summary>
            A percentage counter that shows the active time of one or more components
            as a percentage of the total time of the sample interval. It measures
            time in 100 nanosecond (ns) units.</summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse">
            <summary>
            A percentage counter that shows the active time of one or more components
            as a percentage of the total time of the sample interval. Counters of
            this type measure time in 100 nanosecond (ns) units. They derive the
            active time by measuring the time that the components were not active
            and subtracting the result from multiplying 100 percent by the number
            of objects monitored.</summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiBase">
            <summary>
            A base counter that indicates the number of items sampled. It is used
            as the denominator in the calculations to get an average among the
            items sampled when taking timings of multiple, but similar items.
            Used with CounterMultiTimer, CounterMultiTimerInverse, CounterMultiTimer100Ns,
            and CounterMultiTimer100NsInverse.</summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta32">
            <summary>
            A difference counter that shows the change in the measured attribute
            between the two most recent sample intervals.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta64">
            <summary>
            A difference counter that shows the change in the measured attribute
            between the two most recent sample intervals. It is the same as the
            CounterDelta32 counter type except that is uses larger fields to
            accomodate larger values.</summary>
        </member>
    </members>
</doc>
